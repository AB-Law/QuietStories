"""
Database schema definitions using SQLAlchemy.

This module defines the database tables for storing scenarios and game sessions.
All data is stored in a single SQLite database file for easy backup and portability.
"""

from datetime import datetime
from typing import Optional

from sqlalchemy import JSON, Column, DateTime, Integer, String, Text, create_engine
from sqlalchemy.orm import DeclarativeBase, Mapped, MappedAsDataclass, sessionmaker


class Base(DeclarativeBase):
    """Modern SQLAlchemy 2.0 declarative base with proper typing support."""
    pass


class Scenario(Base):
    """
    Scenario table storing generated scenario specifications.

    Attributes:
        id: Unique scenario identifier (UUID)
        name: Human-readable scenario name
        spec: Complete ScenarioSpec as JSON
        status: Scenario status (generated, compiled, failed)
        created_at: Timestamp when scenario was created
        updated_at: Timestamp when scenario was last modified
    """

    __tablename__ = "scenarios"

    id: Mapped[str] = Column(String, primary_key=True)
    name: Mapped[str] = Column(String, nullable=False)
    spec: Mapped[dict] = Column(JSON, nullable=False)
    status: Mapped[str] = Column(String, nullable=False, default="generated")
    created_at: Mapped[datetime] = Column(DateTime, nullable=False, default=datetime.utcnow)
    updated_at: Mapped[datetime] = Column(
        DateTime, nullable=False, default=datetime.utcnow, onupdate=datetime.utcnow
    )


class Session(Base):
    """
    Session table storing active game sessions.

    Attributes:
        id: Unique session identifier (UUID)
        scenario_id: Reference to the scenario this session uses
        seed: Random seed for reproducibility
        state: Current game state as JSON
        turn: Current turn number
        turn_history: Array of turn records as JSON
        world_background: Generated world narrative
        entities: Current entity/character list as JSON
        private_memory: Private entity memories as JSON
        public_memory: Public entity memories as JSON
        status: Session status (active, completed, failed)
        created_at: Timestamp when session was created
        updated_at: Timestamp when session was last updated
    """

    __tablename__ = "sessions"

    id: Mapped[str] = Column(String, primary_key=True)
    scenario_id: Mapped[str] = Column(String, nullable=False)
    seed: Mapped[Optional[int]] = Column(Integer, nullable=True)
    state: Mapped[dict] = Column(JSON, nullable=False)
    turn: Mapped[int] = Column(Integer, nullable=False, default=0)
    turn_history: Mapped[list] = Column(JSON, nullable=False, default=list)
    world_background: Mapped[Optional[str]] = Column(Text, nullable=True)
    entities: Mapped[list] = Column(JSON, nullable=False, default=list)
    private_memory: Mapped[dict] = Column(JSON, nullable=False, default=dict)
    public_memory: Mapped[dict] = Column(JSON, nullable=False, default=dict)
    status: Mapped[str] = Column(String, nullable=False, default="active")
    scenario_spec: Mapped[Optional[dict]] = Column(JSON, nullable=True)  # Cached scenario spec
    created_at: Mapped[datetime] = Column(DateTime, nullable=False, default=datetime.utcnow)
    updated_at: Mapped[datetime] = Column(
        DateTime, nullable=False, default=datetime.utcnow, onupdate=datetime.utcnow
    )
